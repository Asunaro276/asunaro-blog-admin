// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "cms_api/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// ContentRepository is an autogenerated mock type for the ContentRepository type
type ContentRepository struct {
	mock.Mock
}

type ContentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ContentRepository) EXPECT() *ContentRepository_Expecter {
	return &ContentRepository_Expecter{mock: &_m.Mock}
}

// CreateContent provides a mock function with given fields: content
func (_m *ContentRepository) CreateContent(content *model.Article) error {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Article) error); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentRepository_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type ContentRepository_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - content *model.Article
func (_e *ContentRepository_Expecter) CreateContent(content interface{}) *ContentRepository_CreateContent_Call {
	return &ContentRepository_CreateContent_Call{Call: _e.mock.On("CreateContent", content)}
}

func (_c *ContentRepository_CreateContent_Call) Run(run func(content *model.Article)) *ContentRepository_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Article))
	})
	return _c
}

func (_c *ContentRepository_CreateContent_Call) Return(_a0 error) *ContentRepository_CreateContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContentRepository_CreateContent_Call) RunAndReturn(run func(*model.Article) error) *ContentRepository_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContent provides a mock function with given fields: id
func (_m *ContentRepository) DeleteContent(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentRepository_DeleteContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContent'
type ContentRepository_DeleteContent_Call struct {
	*mock.Call
}

// DeleteContent is a helper method to define mock.On call
//   - id string
func (_e *ContentRepository_Expecter) DeleteContent(id interface{}) *ContentRepository_DeleteContent_Call {
	return &ContentRepository_DeleteContent_Call{Call: _e.mock.On("DeleteContent", id)}
}

func (_c *ContentRepository_DeleteContent_Call) Run(run func(id string)) *ContentRepository_DeleteContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContentRepository_DeleteContent_Call) Return(_a0 error) *ContentRepository_DeleteContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContentRepository_DeleteContent_Call) RunAndReturn(run func(string) error) *ContentRepository_DeleteContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticles provides a mock function with no fields
func (_m *ContentRepository) GetArticles() ([]model.Article, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArticles")
	}

	var r0 []model.Article
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Article, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Article)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContentRepository_GetArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticles'
type ContentRepository_GetArticles_Call struct {
	*mock.Call
}

// GetArticles is a helper method to define mock.On call
func (_e *ContentRepository_Expecter) GetArticles() *ContentRepository_GetArticles_Call {
	return &ContentRepository_GetArticles_Call{Call: _e.mock.On("GetArticles")}
}

func (_c *ContentRepository_GetArticles_Call) Run(run func()) *ContentRepository_GetArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContentRepository_GetArticles_Call) Return(_a0 []model.Article, _a1 error) *ContentRepository_GetArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContentRepository_GetArticles_Call) RunAndReturn(run func() ([]model.Article, error)) *ContentRepository_GetArticles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function with given fields: content
func (_m *ContentRepository) UpdateContent(content *model.Article) error {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Article) error); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentRepository_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type ContentRepository_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - content *model.Article
func (_e *ContentRepository_Expecter) UpdateContent(content interface{}) *ContentRepository_UpdateContent_Call {
	return &ContentRepository_UpdateContent_Call{Call: _e.mock.On("UpdateContent", content)}
}

func (_c *ContentRepository_UpdateContent_Call) Run(run func(content *model.Article)) *ContentRepository_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Article))
	})
	return _c
}

func (_c *ContentRepository_UpdateContent_Call) Return(_a0 error) *ContentRepository_UpdateContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContentRepository_UpdateContent_Call) RunAndReturn(run func(*model.Article) error) *ContentRepository_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewContentRepository creates a new instance of ContentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContentRepository {
	mock := &ContentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
