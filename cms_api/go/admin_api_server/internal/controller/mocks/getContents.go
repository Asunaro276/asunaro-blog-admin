// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "admin/model"

	mock "github.com/stretchr/testify/mock"
)

// GetContents is an autogenerated mock type for the getContents type
type GetContents struct {
	mock.Mock
}

type GetContents_Expecter struct {
	mock *mock.Mock
}

func (_m *GetContents) EXPECT() *GetContents_Expecter {
	return &GetContents_Expecter{mock: &_m.Mock}
}

// GetContents provides a mock function with no fields
func (_m *GetContents) GetContents() ([]model.Content, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContents")
	}

	var r0 []model.Content
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Content, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Content); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Content)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContents_GetContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContents'
type GetContents_GetContents_Call struct {
	*mock.Call
}

// GetContents is a helper method to define mock.On call
func (_e *GetContents_Expecter) GetContents() *GetContents_GetContents_Call {
	return &GetContents_GetContents_Call{Call: _e.mock.On("GetContents")}
}

func (_c *GetContents_GetContents_Call) Run(run func()) *GetContents_GetContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GetContents_GetContents_Call) Return(_a0 []model.Content, _a1 error) *GetContents_GetContents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetContents_GetContents_Call) RunAndReturn(run func() ([]model.Content, error)) *GetContents_GetContents_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetContents creates a new instance of GetContents. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetContents(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetContents {
	mock := &GetContents{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
